


	#k = kl 
	kernels = np.stack([k,zeros,zeros],axis=2)
	kernels = np.expand_dims(kernels,axis=3)
	
	kernels2 = np.stack([zeros,k,zeros],axis=2)
	kernels2 = np.expand_dims(kernels2,axis=3)
   
	kernels3 = np.stack([zeros,zeros,k],axis=2)
	kernels3 = np.expand_dims(kernels3,axis=3)
	
	kernels = np.concatenate((kernels,kernels2,kernels3),axis=3)

	#kernels = np.array([[[[1,-1,1],[-1,1,-1],[1,-1,1]],[[1,-1,1],[-1,1,-1],[1,-1,1]],[[1,-1,1],[-1,1,-1],[1,-1,1]]]]).astype('float32')
	_,_,_,N = kernels.shape
	print("kernels.shape",kernels.shape)
	kernels = tf.constant(kernels)
	
	# Ajout d'un terme HF   
	layer = 'input'
	
	# Definition of the kernels : 
	k = np.array([[ 1, -1,  1],
	   [-1,  1, -1],
	   [ 1, -1,  1]]).astype('float32')
	k = k/9.
	k = k/3.
	kernels = np.stack([k,k,k],axis=2)
	kernels = np.expand_dims(kernels,axis=3)
	
	k2 = np.array([[ -1, -1,  -1],
	   [-1,  8, -1],
	   [ -1, -1,  -1]]).astype('float32')
	k2 = k2/9.
	k2 = k2/3.
	kernels2 = np.stack([k2,k2,k2],axis=2)
	kernels2 = np.expand_dims(kernels2,axis=3)
	
	# Laplacian Filtering 
	kl = np.array([[ 0, -1,  0],
	   [-1,  4, -1],
	   [ 0, -1,  0]]).astype('float32')
	kl = kl/3.
	kernelsl = np.stack([kl,kl,kl],axis=2)
	kernelsl = np.expand_dims(kernelsl,axis=3)
	
	# Gradient : filtre de Sobel
	k = np.array([[ 1, 0,  -1],
	   [2,  0, -2],
	   [ 1, 0,  -1]]).astype('float32')
	k = k/3.
	kernels3 = np.expand_dims(np.stack([k,k,k],axis=2),axis=3)
	k = np.array([[ 1, 2,  1],
	   [0,  0, 0],
	   [ -1, -2,  -1]]).astype('float32')
	k = k/3.
	kernels4 = np.expand_dims(np.stack([k,k,k],axis=2),axis=3)
	kernels = np.concatenate((kernels,kernels2,kernels3,kernels4,kernelsl),axis=3)
	
	
